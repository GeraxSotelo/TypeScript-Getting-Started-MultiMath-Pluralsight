"Note","Course","Module","Clip","Time in Clip","URL"
"configure what files to compile   ","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Using Project Files","3:09","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=4&mode=live&start=189&noteid=172a4132-017d-498f-9731-3b0ea3e8a999"
"create tsc config file with 'tsc --init'","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuring Compiler Options in tsconfig.json","1:49","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=5&mode=live&start=109&noteid=57a7e402-647c-437c-a8c8-07b89eb5b76b"
"The ""outDir"" option tells the compiler the directory that should receive the output JS.","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuring Compiler Options in tsconfig.json","3:18","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=5&mode=live&start=198&noteid=ed7ad2dd-493a-44f8-9911-0888b21c3b2c"
"The ""watch"" option leaves the compiler running so that it can automatically recompile source files as they're saved.","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuring Compiler Options in tsconfig.json","4:09","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=5&mode=live&start=249&noteid=7e6437c0-9a6d-4020-a51e-1b2542989e00"
"Use the ""files"" key to add the files you want the compiler to compile each time it's run","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuring Compiler Options in tsconfig.json","4:34","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=5&mode=live&start=274&noteid=188c6ba0-4797-4049-8bda-4a3e0f68e17c"
"You don't have to run the compiler from the same directory that contains the tsconfig.json file.","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuring Compiler Options in tsconfig.json","5:02","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=5&mode=live&start=302&noteid=e2200a99-d7ee-4902-a30d-9e3ea16b0268"
"""strict"" option","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuring Compiler Options in tsconfig.json","5:59","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=5&mode=live&start=359&noteid=3b2109c7-b18b-49eb-bfea-73b076ef07cb"
"Use the non null assertion operator to assert an object will be non null by adding an exclamation mark after the object","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuring Compiler Options in tsconfig.json","6:41","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=5&mode=live&start=401&noteid=78b7beb6-7bcf-492c-95ce-8838d2fcb7da"
"The ""extends"" setting is used to specify which config file the current config file extends.","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuration Inheritance and Glob Support in tsconfig.json","1:16","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=6&mode=live&start=76&noteid=c7d9624b-3e83-4f02-905b-a7da501f7ab4"
"A glob let's you specify a file name patter for the compiler to match.","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuration Inheritance and Glob Support in tsconfig.json","2:12","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=6&mode=live&start=132&noteid=4e0f8c49-41e7-43e0-8053-7b69ed45c084"
"""include"" takes an array of patterns to match","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuration Inheritance and Glob Support in tsconfig.json","2:17","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=6&mode=live&start=137&noteid=0e5a9a8f-6105-4bdb-8227-64f56455564c"
"Two asterisks tell ""include"" to search recursively through all subdirectories.","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuration Inheritance and Glob Support in tsconfig.json","2:28","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=6&mode=live&start=148&noteid=f3ce0ce7-fad8-4e71-acc8-734a035b3f1b"
"Specifying * for one of the path segments will tell the compiler to look for all valid TypeScript file extensions","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuration Inheritance and Glob Support in tsconfig.json","2:34","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=6&mode=live&start=154&noteid=7ff2d949-e35a-4ca1-994d-ba972d97c8e3"
"ts-loader plugin enables webpack to compile TypeScript code as part of its bundling process","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Compiling with Webpack","1:34","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=7&mode=live&start=94&noteid=fb1aeb9e-3372-4c6c-b49d-38b19cdc023c"
"Hoisting - Using the 'var' keyword, JavaScript runtimes effectively move all variable declarations to the top of the code block in which they're declared","TypeScript: Getting Started","Taking Advantage of Built-in Types","Basic Types and Variable Declarations","1:34","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=1&mode=live&start=94&noteid=6a8f4ee9-89f8-4d3e-b99a-bfdaa01d88c8"
"Annotations are added by placing a colon after the variable followed by the type you want the variable to store.","TypeScript: Getting Started","Taking Advantage of Built-in Types","Type Annotations and Type Inference","0:19","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=2&mode=live&start=19&noteid=336e6162-d96b-410c-9a19-82c5693f6e52"
"If an annotation is not provided when declaring and initializing a variable, the compiler infers the type based on the value used to initialize the variable.","TypeScript: Getting Started","Taking Advantage of Built-in Types","Type Annotations and Type Inference","0:53","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=2&mode=live&start=53&noteid=f1d6a34d-4fac-4f1b-bf83-b6f269cb0519"
"The 'Void' data type is used to represent the absence of a type","TypeScript: Getting Started","Taking Advantage of Built-in Types","Additional Built-in Types","0:14","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=4&mode=live&start=14&noteid=4b1a531a-3469-489a-9c90-1bae77aece66"
"'Null' & 'Undefined' each have their own type in TypeScript","TypeScript: Getting Started","Taking Advantage of Built-in Types","Additional Built-in Types","0:25","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=4&mode=live&start=25&noteid=5c7338a7-032a-440b-98c8-e7256b31b5db"
"The 'Never' type is assigned to values that will never occur","TypeScript: Getting Started","Taking Advantage of Built-in Types","Additional Built-in Types","0:55","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=4&mode=live&start=55&noteid=81cd5684-a4e2-4cd1-94a5-625dfe2973e6"
"The 'Any' type is used when you want to opt out of type checking by the compiler.","TypeScript: Getting Started","Taking Advantage of Built-in Types","Additional Built-in Types","1:15","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=4&mode=live&start=75&noteid=d0ceca4d-1451-408f-b3e9-e54adc730b82"
"A variable can be declared as 1 of 2 data types. Specify the type to be union together using the vertical bar character between each of the possible types.","TypeScript: Getting Started","Taking Advantage of Built-in Types","Union Types and the --strictNullChecks Compiler Option","0:30","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=5&mode=live&start=30&noteid=b885297b-1884-4842-8746-58a6b640fd79"
"With the 'strictNullChecks', compiler option set to 'true', 'null' and 'undefined' are no longer valid values for every other type. You must explicitly opt in to allowing them by the 'null' and/or 'undefined' types in a union type","TypeScript: Getting Started","Taking Advantage of Built-in Types","Union Types and the --strictNullChecks Compiler Option","1:09","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=5&mode=live&start=69&noteid=1e8b849d-8039-476e-8d7c-b62437f92319"
"You can union as many types together as you'd like","TypeScript: Getting Started","Taking Advantage of Built-in Types","Union Types and the --strictNullChecks Compiler Option","2:33","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=5&mode=live&start=153&noteid=3c6abc72-0c22-40b0-a619-049074f2a51b"
"The syntax for asserting a type is to place the type inside angle brackets in front of the variable.","TypeScript: Getting Started","Taking Advantage of Built-in Types","Type Assertions","0:52","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=6&mode=live&start=52&noteid=adeae979-70cb-4281-992e-98eb131108e5"
"An alternative assertion syntax is using the 'as' keyword after the variable and then specify the type it should be.","TypeScript: Getting Started","Taking Advantage of Built-in Types","Type Assertions","1:16","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=6&mode=live&start=76&noteid=96a64ab1-98cd-42dd-b993-b73ae54bbba9"
"Control flow-based type analysis is the compiler analyzing the conditional behavior in the code and applying type checking to your variables using the narrow type possible in any given code branch.","TypeScript: Getting Started","Taking Advantage of Built-in Types","Demo: Understanding Control Flow Type Analysis","0:14","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=8&mode=live&start=14&noteid=a9fb3010-da94-4d4a-b01e-b054b8443f08"
"Function parameters are one case where TypeScript can't infer types, so parameters will implicitly be given the 'any' type, which means that any value can be passed into the function and will get no type checking support from the compiler.","TypeScript: Getting Started","Writing Better Functions with TypeScript","Adding Type Annotations to Functions","0:20","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=68539d9b-1164-48a1-b65a-7d8f510d2578&clip=1&mode=live&start=20&noteid=da2a62f8-c3bf-4f9d-ba79-3b191d1ab98f"
"Annotations are added to parameters using the same syntax used with variables.","TypeScript: Getting Started","Writing Better Functions with TypeScript","Adding Type Annotations to Functions","1:19","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=68539d9b-1164-48a1-b65a-7d8f510d2578&clip=1&mode=live&start=79&noteid=29caf38c-6b63-4bf7-beef-573701c62774"
"In TypeScript, all parameters are considered required unless you specifically flag them as optional with the question mark character.","TypeScript: Getting Started","Writing Better Functions with TypeScript","Adding Type Annotations to Functions","1:40","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=68539d9b-1164-48a1-b65a-7d8f510d2578&clip=1&mode=live&start=100&noteid=f8338fc8-4e54-4ee0-a6f3-989fcc8766c5"
"Any optional parameters must appear AFTER all required parameters in the function signature.","TypeScript: Getting Started","Writing Better Functions with TypeScript","Adding Type Annotations to Functions","2:04","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=68539d9b-1164-48a1-b65a-7d8f510d2578&clip=1&mode=live&start=124&noteid=62ea48a7-df57-4265-97c7-4051517f346f"
"Specify the return type of a function by adding a colon after the closing parentheses after the parameters and then add the type the function will return.","TypeScript: Getting Started","Writing Better Functions with TypeScript","Adding Type Annotations to Functions","2:23","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=68539d9b-1164-48a1-b65a-7d8f510d2578&clip=1&mode=live&start=143&noteid=b3e84018-f12d-4058-817e-402dc0daa578"
"Using the 'any' type, implicitly or explicitly, effectively turns off type checking for that variable or parameter. To avoid accidentally using an implicit 'any' type, you can use the 'noImplicitAny' compiler option.","TypeScript: Getting Started","Writing Better Functions with TypeScript","Using the --noImplicitAny Compiler Option","0:11","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=68539d9b-1164-48a1-b65a-7d8f510d2578&clip=2&mode=live&start=11&noteid=abb54a6d-d333-438f-a50f-fbfdb04c5104"
"Assigning a default value to a parameter in a function effectively makes the parameter optional and assigns it the default value if no value is passed to the function.","TypeScript: Getting Started","Writing Better Functions with TypeScript","Default-initialized Parameters","0:13","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=68539d9b-1164-48a1-b65a-7d8f510d2578&clip=3&mode=live&start=13&noteid=3c85b6ad-5e33-427e-b82c-fa60abc60d4b"
"If a function doesn't return a value, specify 'void' as its return type.","TypeScript: Getting Started","Writing Better Functions with TypeScript","Default-initialized Parameters","0:30","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=68539d9b-1164-48a1-b65a-7d8f510d2578&clip=3&mode=live&start=30&noteid=77e28d77-a022-47f4-b3dc-1972c6773d91"
"Use type assertion <HTMLInputElement> will treat the element it finds as the more specific HTMLInputElement type.","TypeScript: Getting Started","Writing Better Functions with TypeScript","Demo: Adding Type Annotations and Default Parameter Values","1:46","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=68539d9b-1164-48a1-b65a-7d8f510d2578&clip=5&mode=live&start=106&noteid=e9f6b018-3ccb-4c7b-afbc-5c935cab949a"
"If a variable is declared to have a certain function type, you can assign another function of that same function type to it. ","TypeScript: Getting Started","Writing Better Functions with TypeScript","Demo: Taking Advantage of Function Types","1:00","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=68539d9b-1164-48a1-b65a-7d8f510d2578&clip=8&mode=live&start=60&noteid=d89519ad-371b-416a-b69f-eb5732927090"
"You can use function types as type annotations just like you use 'string', 'number', or any other type.","TypeScript: Getting Started","Writing Better Functions with TypeScript","Demo: Taking Advantage of Function Types","1:17","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=68539d9b-1164-48a1-b65a-7d8f510d2578&clip=8&mode=live&start=77&noteid=77d6f1fd-fbe8-49ef-ae9e-6ec71c083a5b"
"To give a variable a function type, add a colon after the variable name, and then put the expected function parameters and their types in parenthesis followed by an arrow and the expected function return type.","TypeScript: Getting Started","Writing Better Functions with TypeScript","Demo: Taking Advantage of Function Types","1:23","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=68539d9b-1164-48a1-b65a-7d8f510d2578&clip=8&mode=live&start=83&noteid=378e9790-3eb4-4f5a-9c72-a6161905588f"
"Interfaces can't be instantiated. They effectively define a contract.","TypeScript: Getting Started","Creating and Using Custom Types","Interfaces vs. Classes","1:19","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=1&mode=live&start=79&noteid=ca70f15f-b0fe-474d-b348-69a4669d5306"
"TypeScript implements a structural type system. As long as the structures match, then you can treat the object as the type with that structure, even if it wasn't explicitly declared with that type.","TypeScript: Getting Started","Creating and Using Custom Types","TypeScript's Structural Type System","1:12","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=3&mode=live&start=72&noteid=6f9c274b-5711-47f5-bd74-a4e5c134619b"
"Adding a question mark after an interface member name marks it as optional, and objects that implement the interface aren't required to implement that member.","TypeScript: Getting Started","Creating and Using Custom Types","Demo: Creating Interfaces","2:50","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=4&mode=live&start=170&noteid=78c49ea2-688e-45fd-b25e-cce7715d20e1"
"Interfaces are a development time tool. They're used by the compiler to type check your code, but they don't compile down to anything in JavaScript.","TypeScript: Getting Started","Creating and Using Custom Types","Demo: Creating Interfaces","5:15","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=4&mode=live&start=315&noteid=c533468e-1c6a-46b8-b2b2-b26ee49cc76b"
"Whenever you want to refer to a class member that belongs to the class you're in, you need to prefix the reference to the member with the 'this' keyword followed by a period.","TypeScript: Getting Started","Creating and Using Custom Types","Class Members","3:14","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=5&mode=live&start=194&noteid=7161717c-14e6-453e-892a-49214252614d"
"Class methods are nearly identical to any other function. The one exception is that you don't include the 'function' keyword in front of the function definition.","TypeScript: Getting Started","Creating and Using Custom Types","Class Members","3:47","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=5&mode=live&start=227&noteid=7b89b6ee-2d00-4917-a283-925b318def9f"
"Use the 'extends' keyword","TypeScript: Getting Started","Creating and Using Custom Types","Extending Classes and Implementing Interfaces","0:07","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=6&mode=live&start=7&noteid=fd9f91c9-b343-4144-ad62-abe3f05d177a"
"Declare that a class will implement an interface by using the 'implements' keyword, followed by the name of the interface it will implement.","TypeScript: Getting Started","Creating and Using Custom Types","Extending Classes and Implementing Interfaces","1:29","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=6&mode=live&start=89&noteid=3a46fbcc-4983-47a6-b3e7-5e7a7ad5aeda"
"TypeScript classes do produce actual JavaScript code. Interfaces are just a development time construct, but classes produce real output that must be delivered to the browser for an app to work.","TypeScript: Getting Started","Creating and Using Custom Types","Demo: Creating Classes","2:52","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=7&mode=live&start=172&noteid=ae9f183d-b3f4-4b2c-9817-0b40c2fe41cc"
"Use a triple slash directive to provide additional instructions to the compiler, like providing a reference to another file.","TypeScript: Getting Started","Creating and Using Custom Types","Demo: Configuring a Project with Multiple Source Files","2:12","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=8&mode=live&start=132&noteid=2a0c8a54-8fd9-4903-b7d7-0ca9b8306b60"
"Use the ""outFile"" option in tsconfig file. It effectively looks at all of the file that get compiled, and directs all of the output to a single file, and makes sure the code in that file is ordered properly.","TypeScript: Getting Started","Creating and Using Custom Types","Demo: Configuring a Project with Multiple Source Files","5:19","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=8&mode=live&start=319&noteid=719a5304-2957-4b46-bec5-bed63975a868"
"Static class members are accessed on the class directly, not on instances of the class.","TypeScript: Getting Started","Creating and Using Custom Types","Static Members","0:14","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=9&mode=live&start=14&noteid=93488e02-3ae3-48ed-a460-febfc6d3dc53"
"With static members, there will only be a single instance of each of the members, and they will exist on the class itself.","TypeScript: Getting Started","Creating and Using Custom Types","Static Members","0:38","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=9&mode=live&start=38&noteid=e4a88810-bb86-46f6-81aa-0e6b6a5742cc"
"Normally, if you want to refer another class member, you use the 'this' keyword in front of the member name; however, with static members, you use the class name since the member exists on the class.","TypeScript: Getting Started","Creating and Using Custom Types","Static Members","1:01","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=9&mode=live&start=61&noteid=66ad1f0f-1469-4112-936d-1ce683eaafa6"
"With static methods, rather than creating a new instance of the class and using it to call a method, you just use the name of the class followed by a dot and the name of the static member.","TypeScript: Getting Started","Creating and Using Custom Types","Static Members","1:17","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=9&mode=live&start=77&noteid=2e049b2d-c236-4cc7-b6bc-27ec2c05a428"
"Static members are a nice way to add utility or helper methods that are related to the purpose of the class, but aren't dependent on any data that might be stored in instances of the class.","TypeScript: Getting Started","Creating and Using Custom Types","Static Members","1:27","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=9&mode=live&start=87&noteid=b5581817-c1cb-4d7c-bf53-9ede992865c2"
"Constructor functions are a special type of function that's executed when new instances of the class are created.","TypeScript: Getting Started","Creating and Using Custom Types","Constructors","0:05","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=10&mode=live&start=5&noteid=a1f9c8bf-187f-4a83-8b73-031eeb5cf89e"
"Constructors are a handy place to perform any special initialization or setup that needs to be performed for new instances of its class.","TypeScript: Getting Started","Creating and Using Custom Types","Constructors","0:11","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=10&mode=live&start=11&noteid=eaf41947-2815-481e-9074-c92c8edd3492"
"The syntax of constructors is very similar to other methods, except the name is always 'constructor'","TypeScript: Getting Started","Creating and Using Custom Types","Constructors","0:22","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=10&mode=live&start=22&noteid=a9fc6c62-3acb-492e-9b62-9ad978fc7db9"
"Constructor functions are not required to be added to a class.","TypeScript: Getting Started","Creating and Using Custom Types","Constructors","0:43","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=10&mode=live&start=43&noteid=3f035e5d-177e-430f-baee-ccf4a9b2e51a"
"Calling 'super()' is how you call the parent class' constructor from a child class.","TypeScript: Getting Started","Creating and Using Custom Types","Constructors","1:28","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=10&mode=live&start=88&noteid=401fce61-2bd0-471b-a547-9d8b6a41a8c7"
"If your class extends some other class and your class has a constructor, then you're required to call 'super()'","TypeScript: Getting Started","Creating and Using Custom Types","Constructors","1:44","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=10&mode=live&start=104&noteid=e16f595f-cb97-4527-a07b-2c0bdb130dd8"
"Initializing properties in a constructor is one of the most common ways to use constructors.","TypeScript: Getting Started","Creating and Using Custom Types","Constructors","2:01","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=10&mode=live&start=121&noteid=8b4961c0-f406-461e-9dd3-a41f1d96f697"
"Properties declared as 'readonly' may only be initialized when they're declared or inside a constructor.","TypeScript: Getting Started","Creating and Using Custom Types","Constructors","2:21","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=10&mode=live&start=141&noteid=6a5377ec-d194-4b0f-a893-976f90560562"
"parameter properties","TypeScript: Getting Started","Creating and Using Custom Types","Demo: Refactoring the Demo App with Classes","4:06","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=11&mode=live&start=246&noteid=aa3da61c-4ac6-4443-99e6-e62b45fd61f7"
"The built-in String() constructor can be passed any value, and it will attempt to convert it to a string.","TypeScript: Getting Started","Creating and Using Custom Types","Demo: Refactoring the Demo App with Classes","5:00","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=d4bcb2f2-7276-4a82-8d83-b9610fe70881&clip=11&mode=live&start=300&noteid=5160cbb5-6173-4821-89b4-bbb7719a97f6"
"Encapsulation - Modules allow you to encapsulate implementation details inside the module and only expose a carefully considered API for other modules to consume. This gives you the freedom to refactor code inside the module and not affect consumers of the module as long as the API for it doesn't change.","TypeScript: Getting Started","Creating and Consuming Modules","Why Use Modules?","0:22","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=f9d6853c-4058-48eb-8571-df6a3ef8f0c9&clip=1&mode=live&start=22&noteid=7ad81ccf-6213-4f09-8989-5da8d8e63258"
"Reusability - Modules are easily reusable. If designed to implement a very specific piece of functionality, they can be used throughout an app or dropped into other apps as needed.","TypeScript: Getting Started","Creating and Consuming Modules","Why Use Modules?","0:41","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=f9d6853c-4058-48eb-8571-df6a3ef8f0c9&clip=1&mode=live&start=41&noteid=8210407a-7622-419d-91f5-89ab24fd5f92"
"Modules allow you to think about your apps in terms of larger building blocks. They create higher level abstractions you can use when discussing and planning your app.","TypeScript: Getting Started","Creating and Consuming Modules","Why Use Modules?","0:54","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=f9d6853c-4058-48eb-8571-df6a3ef8f0c9&clip=1&mode=live&start=54&noteid=3b3531e4-343e-4517-9e93-9d5b088c21bb"
"Unless your runtime environment natively supports ES2015 modules, you'll need the help of a module loader or bundler to run your code.","TypeScript: Getting Started","Creating and Consuming Modules","Supporting Technologies","1:00","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=f9d6853c-4058-48eb-8571-df6a3ef8f0c9&clip=2&mode=live&start=60&noteid=30c8dcc2-7d9b-47bb-8bc1-70baea0d5910"
"Node will natively load CommonJS modules, but if you're writing a browser app, you may need to use the popular RequireJS or SystemJS libraries to load modules.","TypeScript: Getting Started","Creating and Consuming Modules","Supporting Technologies","1:10","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=f9d6853c-4058-48eb-8571-df6a3ef8f0c9&clip=2&mode=live&start=70&noteid=937f98dd-74d5-4003-9b38-3b11161edc18"
"A module bundler, like webpack, will prepare your modules to execute in a browser as part of a build step.","TypeScript: Getting Started","Creating and Consuming Modules","Supporting Technologies","1:22","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=f9d6853c-4058-48eb-8571-df6a3ef8f0c9&clip=2&mode=live&start=82&noteid=70c25153-8b50-4376-a317-f03100f980fb"
"Using the 'default' keyword' after the 'export' keyword on an item specifies that the item will be the default item exported from this module. If the importing module doesn't specify the name of a particular item to import from this module, then it would be this default item that would be imported.","TypeScript: Getting Started","Creating and Consuming Modules","Exporting and Importing","0:47","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=f9d6853c-4058-48eb-8571-df6a3ef8f0c9&clip=3&mode=live&start=47&noteid=df0d38c7-9f30-4cdc-aece-524a165438b2"
"Export Statements - Use the  'export' keyword followed by a comma-separated list of the names of the items to export inside curly braces.","TypeScript: Getting Started","Creating and Consuming Modules","Exporting and Importing","1:28","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=f9d6853c-4058-48eb-8571-df6a3ef8f0c9&clip=3&mode=live&start=88&noteid=e1d29f21-0288-4a6a-ba66-7efb7200539b"
"In an export statement, you can use the 'as' keyword after the name of an item to be exported followed by an alias to be used for that exported item. The original item's name can be used inside its module, but will appear to other modules that import it as the alias name.","TypeScript: Getting Started","Creating and Consuming Modules","Exporting and Importing","2:08","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=f9d6853c-4058-48eb-8571-df6a3ef8f0c9&clip=3&mode=live&start=128&noteid=2b993b3d-234f-4e42-b693-f2de9181f196"
"To use the functionality exported from a module, you must import it in the consuming module.","TypeScript: Getting Started","Creating and Consuming Modules","Exporting and Importing","2:49","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=f9d6853c-4058-48eb-8571-df6a3ef8f0c9&clip=3&mode=live&start=169&noteid=7a625bbf-c1dd-4aa2-ada3-d8a6ab562a19"
"Omitting curly braces is one way to import the default export from a module. The default export from that module will be assigned whatever name it is given in the importing module, regardless of what it was named in the exporting module.","TypeScript: Getting Started","Creating and Consuming Modules","Exporting and Importing","4:04","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=f9d6853c-4058-48eb-8571-df6a3ef8f0c9&clip=3&mode=live&start=244&noteid=7d96f0dd-7acd-4917-8de4-a7b6630d95c2"
"Items can be imported and aliased as part of the import statement with the 'as' keyword followed by the alias name.","TypeScript: Getting Started","Creating and Consuming Modules","Exporting and Importing","4:49","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=f9d6853c-4058-48eb-8571-df6a3ef8f0c9&clip=3&mode=live&start=289&noteid=130fbaa5-d3a9-4e05-83e6-906970466204"
"You can import an entire module by using an asterisk followed by the 'as' keyword and the name you want to use to refer to the imported module.","TypeScript: Getting Started","Creating and Consuming Modules","Exporting and Importing","5:12","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=f9d6853c-4058-48eb-8571-df6a3ef8f0c9&clip=3&mode=live&start=312&noteid=657586c5-0323-4491-861b-8354e0d04816"