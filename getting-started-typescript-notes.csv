"Note","Course","Module","Clip","Time in Clip","URL"
"configure what files to compile   ","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Using Project Files","3:09","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=4&mode=live&start=189&noteid=172a4132-017d-498f-9731-3b0ea3e8a999"
"create tsc config file with 'tsc --init'","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuring Compiler Options in tsconfig.json","1:49","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=5&mode=live&start=109&noteid=57a7e402-647c-437c-a8c8-07b89eb5b76b"
"The ""outDir"" option tells the compiler the directory that should receive the output JS.","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuring Compiler Options in tsconfig.json","3:18","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=5&mode=live&start=198&noteid=ed7ad2dd-493a-44f8-9911-0888b21c3b2c"
"The ""watch"" option leaves the compiler running so that it can automatically recompile source files as they're saved.","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuring Compiler Options in tsconfig.json","4:09","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=5&mode=live&start=249&noteid=7e6437c0-9a6d-4020-a51e-1b2542989e00"
"Use the ""files"" key to add the files you want the compiler to compile each time it's run","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuring Compiler Options in tsconfig.json","4:34","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=5&mode=live&start=274&noteid=188c6ba0-4797-4049-8bda-4a3e0f68e17c"
"You don't have to run the compiler from the same directory that contains the tsconfig.json file.","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuring Compiler Options in tsconfig.json","5:02","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=5&mode=live&start=302&noteid=e2200a99-d7ee-4902-a30d-9e3ea16b0268"
"""strict"" option","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuring Compiler Options in tsconfig.json","5:59","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=5&mode=live&start=359&noteid=3b2109c7-b18b-49eb-bfea-73b076ef07cb"
"Use the non null assertion operator to assert an object will be non null by adding an exclamation mark after the object","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuring Compiler Options in tsconfig.json","6:41","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=5&mode=live&start=401&noteid=78b7beb6-7bcf-492c-95ce-8838d2fcb7da"
"The ""extends"" setting is used to specify which config file the current config file extends.","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuration Inheritance and Glob Support in tsconfig.json","1:16","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=6&mode=live&start=76&noteid=c7d9624b-3e83-4f02-905b-a7da501f7ab4"
"A glob let's you specify a file name patter for the compiler to match.","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuration Inheritance and Glob Support in tsconfig.json","2:12","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=6&mode=live&start=132&noteid=4e0f8c49-41e7-43e0-8053-7b69ed45c084"
"""include"" takes an array of patterns to match","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuration Inheritance and Glob Support in tsconfig.json","2:17","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=6&mode=live&start=137&noteid=0e5a9a8f-6105-4bdb-8227-64f56455564c"
"Two asterisks tell ""include"" to search recursively through all subdirectories.","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuration Inheritance and Glob Support in tsconfig.json","2:28","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=6&mode=live&start=148&noteid=f3ce0ce7-fad8-4e71-acc8-734a035b3f1b"
"Specifying * for one of the path segments will tell the compiler to look for all valid TypeScript file extensions","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Configuration Inheritance and Glob Support in tsconfig.json","2:34","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=6&mode=live&start=154&noteid=7ff2d949-e35a-4ca1-994d-ba972d97c8e3"
"ts-loader plugin enables webpack to compile TypeScript code as part of its bundling process","TypeScript: Getting Started","Installing TypeScript and Configuring a Project","Demo: Compiling with Webpack","1:34","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=fec7c7fb-b637-4dd0-a2ba-bfe877579a1e&clip=7&mode=live&start=94&noteid=fb1aeb9e-3372-4c6c-b49d-38b19cdc023c"
"Hoisting - Using the 'var' keyword, JavaScript runtimes effectively move all variable declarations to the top of the code block in which they're declared","TypeScript: Getting Started","Taking Advantage of Built-in Types","Basic Types and Variable Declarations","1:34","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=1&mode=live&start=94&noteid=6a8f4ee9-89f8-4d3e-b99a-bfdaa01d88c8"
"Annotations are added by placing a colon after the variable followed by the type you want the variable to store.","TypeScript: Getting Started","Taking Advantage of Built-in Types","Type Annotations and Type Inference","0:19","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=2&mode=live&start=19&noteid=336e6162-d96b-410c-9a19-82c5693f6e52"
"If an annotation is not provided when declaring and initializing a variable, the compiler infers the type based on the value used to initialize the variable.","TypeScript: Getting Started","Taking Advantage of Built-in Types","Type Annotations and Type Inference","0:53","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=2&mode=live&start=53&noteid=f1d6a34d-4fac-4f1b-bf83-b6f269cb0519"
"The 'Void' data type is used to represent the absence of a type","TypeScript: Getting Started","Taking Advantage of Built-in Types","Additional Built-in Types","0:14","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=4&mode=live&start=14&noteid=4b1a531a-3469-489a-9c90-1bae77aece66"
"'Null' & 'Undefined' each have their own type in TypeScript","TypeScript: Getting Started","Taking Advantage of Built-in Types","Additional Built-in Types","0:25","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=4&mode=live&start=25&noteid=5c7338a7-032a-440b-98c8-e7256b31b5db"
"The 'Never' type is assigned to values that will never occur","TypeScript: Getting Started","Taking Advantage of Built-in Types","Additional Built-in Types","0:55","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=4&mode=live&start=55&noteid=81cd5684-a4e2-4cd1-94a5-625dfe2973e6"
"The 'Any' type is used when you want to opt out of type checking by the compiler.","TypeScript: Getting Started","Taking Advantage of Built-in Types","Additional Built-in Types","1:15","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=4&mode=live&start=75&noteid=d0ceca4d-1451-408f-b3e9-e54adc730b82"
"A variable can be declared as 1 of 2 data types. Specify the type to be union together using the vertical bar character between each of the possible types.","TypeScript: Getting Started","Taking Advantage of Built-in Types","Union Types and the --strictNullChecks Compiler Option","0:30","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=5&mode=live&start=30&noteid=b885297b-1884-4842-8746-58a6b640fd79"
"With the 'strictNullChecks', compiler option set to 'true', 'null' and 'undefined' are no longer valid values for every other type. You must explicitly opt in to allowing them by the 'null' and/or 'undefined' types in a union type","TypeScript: Getting Started","Taking Advantage of Built-in Types","Union Types and the --strictNullChecks Compiler Option","1:09","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=5&mode=live&start=69&noteid=1e8b849d-8039-476e-8d7c-b62437f92319"
"You can union as many types together as you'd like","TypeScript: Getting Started","Taking Advantage of Built-in Types","Union Types and the --strictNullChecks Compiler Option","2:33","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=5&mode=live&start=153&noteid=3c6abc72-0c22-40b0-a619-049074f2a51b"
"The syntax for asserting a type is to place the type inside angle brackets in front of the variable.","TypeScript: Getting Started","Taking Advantage of Built-in Types","Type Assertions","0:52","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=6&mode=live&start=52&noteid=adeae979-70cb-4281-992e-98eb131108e5"
"An alternative assertion syntax is using the 'as' keyword after the variable and then specify the type it should be.","TypeScript: Getting Started","Taking Advantage of Built-in Types","Type Assertions","1:16","https://app.pluralsight.com/player?course=getting-started-typescript&author=brice-wilson&name=2369041a-5d9b-44de-bbc8-7113cee69c1c&clip=6&mode=live&start=76&noteid=96a64ab1-98cd-42dd-b993-b73ae54bbba9"